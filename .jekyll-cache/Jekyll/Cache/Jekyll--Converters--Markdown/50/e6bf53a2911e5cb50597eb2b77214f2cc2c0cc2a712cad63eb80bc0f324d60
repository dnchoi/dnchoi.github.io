I"÷P<h1 id="ros-create-package">ROS create package</h1>

<h1 id="1-workspace-init">1. Workspace init</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nb">mkdir</span> <span class="nt">-p</span> catkin_ws/src

<span class="nb">cd </span>catkin_ws/src

catkin_init_workspace
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="sb">`</span><span class="nt">--</span> catkin_ws
    <span class="sb">`</span><span class="nt">--</span> src
        <span class="sb">`</span><span class="nt">--</span> CMakeLists.txt -&gt; /opt/ros/melodic/share/catkin/cmake/toplevel.cmake
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="2-create-package">2. Create package</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nb">cd </span>catkin_ws/src

catkin_create_pkg <span class="o">{</span>package name<span class="o">}</span> rospy roscpp std_msgs cv_bridge
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="sb">`</span><span class="nt">--</span> src
    |-- CMakeLists.txt -&gt; /opt/ros/melodic/share/catkin/cmake/toplevel.cmake
    <span class="sb">`</span><span class="nt">--</span> <span class="nb">test</span>
        |-- CMakeLists.txt
        |-- include
        |   <span class="sb">`</span><span class="nt">--</span> <span class="nb">test</span>
        |-- package.xml
        <span class="sb">`</span><span class="nt">--</span> src
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="3-package-files">3. Package files</h1>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"2"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>test<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>The test package<span class="nt">&lt;/description&gt;</span>

  <span class="c">&lt;!-- One maintainer tag required, multiple allowed, one person per tag --&gt;</span>
  <span class="c">&lt;!-- Example:  --&gt;</span>
  <span class="c">&lt;!-- &lt;maintainer email="jane.doe@example.com"&gt;Jane Doe&lt;/maintainer&gt; --&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"root@todo.todo"</span><span class="nt">&gt;</span>root<span class="nt">&lt;/maintainer&gt;</span>


  <span class="c">&lt;!-- One license tag required, multiple allowed, one license per tag --&gt;</span>
  <span class="c">&lt;!-- Commonly used license strings: --&gt;</span>
  <span class="c">&lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO<span class="nt">&lt;/license&gt;</span>


  <span class="c">&lt;!-- Url tags are optional, but multiple are allowed, one per tag --&gt;</span>
  <span class="c">&lt;!-- Optional attribute type can be: website, bugtracker, or repository --&gt;</span>
  <span class="c">&lt;!-- Example: --&gt;</span>
  <span class="c">&lt;!-- &lt;url type="website"&gt;http://wiki.ros.org/test&lt;/url&gt; --&gt;</span>


  <span class="c">&lt;!-- Author tags are optional, multiple are allowed, one per tag --&gt;</span>
  <span class="c">&lt;!-- Authors do not have to be maintainers, but could be --&gt;</span>
  <span class="c">&lt;!-- Example: --&gt;</span>
  <span class="c">&lt;!-- &lt;author email="jane.doe@example.com"&gt;Jane Doe&lt;/author&gt; --&gt;</span>


  <span class="c">&lt;!-- The *depend tags are used to specify dependencies --&gt;</span>
  <span class="c">&lt;!-- Dependencies can be catkin packages or system dependencies --&gt;</span>
  <span class="c">&lt;!-- Examples: --&gt;</span>
  <span class="c">&lt;!-- Use depend as a shortcut for packages that are both build and exec dependencies --&gt;</span>
  <span class="c">&lt;!--   &lt;depend&gt;roscpp&lt;/depend&gt; --&gt;</span>
  <span class="c">&lt;!--   Note that this is equivalent to the following: --&gt;</span>
  <span class="c">&lt;!--   &lt;build_depend&gt;roscpp&lt;/build_depend&gt; --&gt;</span>
  <span class="c">&lt;!--   &lt;exec_depend&gt;roscpp&lt;/exec_depend&gt; --&gt;</span>
  <span class="c">&lt;!-- Use build_depend for packages you need at compile time: --&gt;</span>
  <span class="c">&lt;!--   &lt;build_depend&gt;message_generation&lt;/build_depend&gt; --&gt;</span>
  <span class="c">&lt;!-- Use build_export_depend for packages you need in order to build against this package: --&gt;</span>
  <span class="c">&lt;!--   &lt;build_export_depend&gt;message_generation&lt;/build_export_depend&gt; --&gt;</span>
  <span class="c">&lt;!-- Use buildtool_depend for build tool packages: --&gt;</span>
  <span class="c">&lt;!--   &lt;buildtool_depend&gt;catkin&lt;/buildtool_depend&gt; --&gt;</span>
  <span class="c">&lt;!-- Use exec_depend for packages you need at runtime: --&gt;</span>
  <span class="c">&lt;!--   &lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt; --&gt;</span>
  <span class="c">&lt;!-- Use test_depend for packages you need only for testing: --&gt;</span>
  <span class="c">&lt;!--   &lt;test_depend&gt;gtest&lt;/test_depend&gt; --&gt;</span>
  <span class="c">&lt;!-- Use doc_depend for packages you need only for building documentation: --&gt;</span>
  <span class="c">&lt;!--   &lt;doc_depend&gt;doxygen&lt;/doc_depend&gt; --&gt;</span>
  <span class="nt">&lt;buildtool_depend&gt;</span>catkin<span class="nt">&lt;/buildtool_depend&gt;</span>
  <span class="nt">&lt;build_depend&gt;</span>cv_bridge<span class="nt">&lt;/build_depend&gt;</span>
  <span class="nt">&lt;build_depend&gt;</span>roscpp<span class="nt">&lt;/build_depend&gt;</span>
  <span class="nt">&lt;build_depend&gt;</span>rospy<span class="nt">&lt;/build_depend&gt;</span>
  <span class="nt">&lt;build_depend&gt;</span>std_msgs<span class="nt">&lt;/build_depend&gt;</span>
  <span class="nt">&lt;build_export_depend&gt;</span>cv_bridge<span class="nt">&lt;/build_export_depend&gt;</span>
  <span class="nt">&lt;build_export_depend&gt;</span>roscpp<span class="nt">&lt;/build_export_depend&gt;</span>
  <span class="nt">&lt;build_export_depend&gt;</span>rospy<span class="nt">&lt;/build_export_depend&gt;</span>
  <span class="nt">&lt;build_export_depend&gt;</span>std_msgs<span class="nt">&lt;/build_export_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>cv_bridge<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>roscpp<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>rospy<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>std_msgs<span class="nt">&lt;/exec_depend&gt;</span>


  <span class="c">&lt;!-- The export tag contains other, unspecified, tags --&gt;</span>
  <span class="nt">&lt;export&gt;</span>
    <span class="c">&lt;!-- Other tools can request additional information be placed here --&gt;</span>

  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
</pre></td><td class="rouge-code"><pre><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.0.2<span class="p">)</span>
<span class="nb">project</span><span class="p">(</span>test<span class="p">)</span>

<span class="c1">## Compile as C++11, supported in ROS Kinetic and newer</span>
<span class="c1"># add_compile_options(-std=c++11)</span>

<span class="c1">## Find catkin macros and libraries</span>
<span class="c1">## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)</span>
<span class="c1">## is used, also find other catkin packages</span>
<span class="nb">find_package</span><span class="p">(</span>catkin REQUIRED COMPONENTS
  cv_bridge
  roscpp
  rospy
  std_msgs
<span class="p">)</span>

<span class="c1">## System dependencies are found with CMake's conventions</span>
<span class="c1"># find_package(Boost REQUIRED COMPONENTS system)</span>


<span class="c1">## Uncomment this if the package has a setup.py. This macro ensures</span>
<span class="c1">## modules and global scripts declared therein get installed</span>
<span class="c1">## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html</span>
<span class="c1"># catkin_python_setup()</span>

<span class="c1">################################################</span>
<span class="c1">## Declare ROS messages, services and actions ##</span>
<span class="c1">################################################</span>

<span class="c1">## To declare and build messages, services or actions from within this</span>
<span class="c1">## package, follow these steps:</span>
<span class="c1">## * Let MSG_DEP_SET be the set of packages whose message types you use in</span>
<span class="c1">##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).</span>
<span class="c1">## * In the file package.xml:</span>
<span class="c1">##   * add a build_depend tag for "message_generation"</span>
<span class="c1">##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET</span>
<span class="c1">##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in</span>
<span class="c1">##     but can be declared for certainty nonetheless:</span>
<span class="c1">##     * add a exec_depend tag for "message_runtime"</span>
<span class="c1">## * In this file (CMakeLists.txt):</span>
<span class="c1">##   * add "message_generation" and every package in MSG_DEP_SET to</span>
<span class="c1">##     find_package(catkin REQUIRED COMPONENTS ...)</span>
<span class="c1">##   * add "message_runtime" and every package in MSG_DEP_SET to</span>
<span class="c1">##     catkin_package(CATKIN_DEPENDS ...)</span>
<span class="c1">##   * uncomment the add_*_files sections below as needed</span>
<span class="c1">##     and list every .msg/.srv/.action file to be processed</span>
<span class="c1">##   * uncomment the generate_messages entry below</span>
<span class="c1">##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)</span>

<span class="c1">## Generate messages in the 'msg' folder</span>
<span class="c1"># add_message_files(</span>
<span class="c1">#   FILES</span>
<span class="c1">#   Message1.msg</span>
<span class="c1">#   Message2.msg</span>
<span class="c1"># )</span>

<span class="c1">## Generate services in the 'srv' folder</span>
<span class="c1"># add_service_files(</span>
<span class="c1">#   FILES</span>
<span class="c1">#   Service1.srv</span>
<span class="c1">#   Service2.srv</span>
<span class="c1"># )</span>

<span class="c1">## Generate actions in the 'action' folder</span>
<span class="c1"># add_action_files(</span>
<span class="c1">#   FILES</span>
<span class="c1">#   Action1.action</span>
<span class="c1">#   Action2.action</span>
<span class="c1"># )</span>

<span class="c1">## Generate added messages and services with any dependencies listed here</span>
<span class="c1"># generate_messages(</span>
<span class="c1">#   DEPENDENCIES</span>
<span class="c1">#   std_msgs</span>
<span class="c1"># )</span>

<span class="c1">################################################</span>
<span class="c1">## Declare ROS dynamic reconfigure parameters ##</span>
<span class="c1">################################################</span>

<span class="c1">## To declare and build dynamic reconfigure parameters within this</span>
<span class="c1">## package, follow these steps:</span>
<span class="c1">## * In the file package.xml:</span>
<span class="c1">##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"</span>
<span class="c1">## * In this file (CMakeLists.txt):</span>
<span class="c1">##   * add "dynamic_reconfigure" to</span>
<span class="c1">##     find_package(catkin REQUIRED COMPONENTS ...)</span>
<span class="c1">##   * uncomment the "generate_dynamic_reconfigure_options" section below</span>
<span class="c1">##     and list every .cfg file to be processed</span>

<span class="c1">## Generate dynamic reconfigure parameters in the 'cfg' folder</span>
<span class="c1"># generate_dynamic_reconfigure_options(</span>
<span class="c1">#   cfg/DynReconf1.cfg</span>
<span class="c1">#   cfg/DynReconf2.cfg</span>
<span class="c1"># )</span>

<span class="c1">###################################</span>
<span class="c1">## catkin specific configuration ##</span>
<span class="c1">###################################</span>
<span class="c1">## The catkin_package macro generates cmake config files for your package</span>
<span class="c1">## Declare things to be passed to dependent projects</span>
<span class="c1">## INCLUDE_DIRS: uncomment this if your package contains header files</span>
<span class="c1">## LIBRARIES: libraries you create in this project that dependent projects also need</span>
<span class="c1">## CATKIN_DEPENDS: catkin_packages dependent projects also need</span>
<span class="c1">## DEPENDS: system dependencies of this project that dependent projects also need</span>
<span class="nf">catkin_package</span><span class="p">(</span>
<span class="c1">#  INCLUDE_DIRS include</span>
<span class="c1">#  LIBRARIES test</span>
<span class="c1">#  CATKIN_DEPENDS cv_bridge roscpp rospy std_msgs</span>
<span class="c1">#  DEPENDS system_lib</span>
<span class="p">)</span>

<span class="c1">###########</span>
<span class="c1">## Build ##</span>
<span class="c1">###########</span>

<span class="c1">## Specify additional locations of header files</span>
<span class="c1">## Your package locations should be listed before other locations</span>
<span class="nb">include_directories</span><span class="p">(</span>
<span class="c1"># include</span>
  <span class="si">${</span><span class="nv">catkin_INCLUDE_DIRS</span><span class="si">}</span>
<span class="p">)</span>

<span class="c1">## Declare a C++ library</span>
<span class="c1"># add_library(${PROJECT_NAME}</span>
<span class="c1">#   src/${PROJECT_NAME}/test.cpp</span>
<span class="c1"># )</span>

<span class="c1">## Add cmake target dependencies of the library</span>
<span class="c1">## as an example, code may need to be generated before libraries</span>
<span class="c1">## either from message generation or dynamic reconfigure</span>
<span class="c1"># add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})</span>

<span class="c1">## Declare a C++ executable</span>
<span class="c1">## With catkin_make all packages are built within a single CMake context</span>
<span class="c1">## The recommended prefix ensures that target names across packages don't collide</span>
<span class="c1"># add_executable(${PROJECT_NAME}_node src/test_node.cpp)</span>

<span class="c1">## Rename C++ executable without prefix</span>
<span class="c1">## The above recommended prefix causes long target names, the following renames the</span>
<span class="c1">## target back to the shorter version for ease of user use</span>
<span class="c1">## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"</span>
<span class="c1"># set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")</span>

<span class="c1">## Add cmake target dependencies of the executable</span>
<span class="c1">## same as for the library above</span>
<span class="c1"># add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})</span>

<span class="c1">## Specify libraries to link a library or executable target against</span>
<span class="c1"># target_link_libraries(${PROJECT_NAME}_node</span>
<span class="c1">#   ${catkin_LIBRARIES}</span>
<span class="c1"># )</span>

<span class="c1">#############</span>
<span class="c1">## Install ##</span>
<span class="c1">#############</span>

<span class="c1"># all install targets should use catkin DESTINATION variables</span>
<span class="c1"># See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html</span>

<span class="c1">## Mark executable scripts (Python etc.) for installation</span>
<span class="c1">## in contrast to setup.py, you can choose the destination</span>
<span class="c1"># catkin_install_python(PROGRAMS</span>
<span class="c1">#   scripts/my_python_script</span>
<span class="c1">#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}</span>
<span class="c1"># )</span>

<span class="c1">## Mark executables for installation</span>
<span class="c1">## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html</span>
<span class="c1"># install(TARGETS ${PROJECT_NAME}_node</span>
<span class="c1">#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}</span>
<span class="c1"># )</span>

<span class="c1">## Mark libraries for installation</span>
<span class="c1">## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html</span>
<span class="c1"># install(TARGETS ${PROJECT_NAME}</span>
<span class="c1">#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}</span>
<span class="c1">#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}</span>
<span class="c1">#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}</span>
<span class="c1"># )</span>

<span class="c1">## Mark cpp header files for installation</span>
<span class="c1"># install(DIRECTORY include/${PROJECT_NAME}/</span>
<span class="c1">#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}</span>
<span class="c1">#   FILES_MATCHING PATTERN "*.h"</span>
<span class="c1">#   PATTERN ".svn" EXCLUDE</span>
<span class="c1"># )</span>

<span class="c1">## Mark other files for installation (e.g. launch and bag files, etc.)</span>
<span class="c1"># install(FILES</span>
<span class="c1">#   # myfile1</span>
<span class="c1">#   # myfile2</span>
<span class="c1">#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}</span>
<span class="c1"># )</span>

<span class="c1">#############</span>
<span class="c1">## Testing ##</span>
<span class="c1">#############</span>

<span class="c1">## Add gtest based cpp test target and link libraries</span>
<span class="c1"># catkin_add_gtest(${PROJECT_NAME}-test test/test_test.cpp)</span>
<span class="c1"># if(TARGET ${PROJECT_NAME}-test)</span>
<span class="c1">#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})</span>
<span class="c1"># endif()</span>

<span class="c1">## Add folders to be run by python nosetests</span>
<span class="c1"># catkin_add_nosetests(test)</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET